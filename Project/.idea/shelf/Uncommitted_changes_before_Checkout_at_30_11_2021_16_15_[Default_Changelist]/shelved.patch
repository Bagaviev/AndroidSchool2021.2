Index: app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.presentation.view\r\n\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.graphics.BlendModeColorFilterCompat\r\nimport androidx.core.graphics.BlendModeCompat\r\nimport androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.DividerItemDecoration\r\nimport com.example.meteohub.R\r\nimport com.example.meteohub.databinding.ActivityListBinding\r\nimport com.example.meteohub.di.ApplicationResLocator\r\nimport com.example.meteohub.domain.IRepository\r\nimport com.example.meteohub.domain.our_model.City\r\nimport com.example.meteohub.domain.our_model.WeeklyWeather\r\nimport com.example.meteohub.presentation.view.adapter.IClickListener\r\nimport com.example.meteohub.presentation.view.adapter.WeatherListAdapter\r\nimport com.example.meteohub.presentation.viewmodel.ListActivityViewModel\r\nimport com.example.meteohub.utils.Constants\r\nimport com.example.meteohub.utils.Utility\r\nimport com.google.android.material.snackbar.BaseTransientBottomBar\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.squareup.picasso.Picasso\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass ListActivity : AppCompatActivity() {\r\n    private var binding: ActivityListBinding? = null\r\n\r\n    private lateinit var listActivityViewModel: ListActivityViewModel\r\n\r\n    private var savedCity: City? = null\r\n\r\n    private var utils: Utility? = Utility()\r\n\r\n    companion object {\r\n        var BUNDLE_SELECTED_DAY_KEY: String? = \"BUNDLE_SELECTED_DAY_KEY\"\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        installSplashScreen()\r\n\r\n        binding = ActivityListBinding.inflate(layoutInflater)\r\n\r\n        val view = binding!!.root\r\n        setContentView(view)\r\n\r\n        if (!utils?.isNetworkAvailable(this)!!) {\r\n            val dialog = utils?.provideAlertDialog(this, Constants.NO_NETWORK_CONNECTION)\r\n            setupDialog(this, utils!!, dialog!!)\r\n        } else {\r\n            createViewModel()\r\n            subscribeForLiveData()\r\n        }\r\n\r\n        initRecycler()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        if (utils?.isNetworkAvailable(this)!!) {\r\n            initSwipeRefresh()\r\n            makeRequest()\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        savedCity = null\r\n        utils = null\r\n        super.onDestroy()\r\n    }\r\n\r\n    private fun createViewModel() {\r\n        val repository: IRepository = (applicationContext as ApplicationResLocator).appComponent.getRepository()\r\n\r\n        listActivityViewModel = ViewModelProvider(this, object: ViewModelProvider.Factory {\r\n            override fun <T : ViewModel?> create(modelClass: Class<T>): T {\r\n                return ListActivityViewModel(repository, (applicationContext as ApplicationResLocator).getSelf()) as T\r\n            }\r\n        }).get(ListActivityViewModel::class.java)\r\n    }\r\n\r\n    private fun subscribeForLiveData() {     // потом прикрутить swipe refresh layout и в нем вызывать только listActivityViewModel.doGet() в коллбеке layout'а, и при этом observeLiveData() больше нигде не вызывать. В таком случае обновление загруженных данных должно произойти само если я все правильно понимаю\r\n        listActivityViewModel.getWeatherLiveData().observe(this, this::showData)\r\n        listActivityViewModel.getProgressLiveData().observe(this, this::showProgress)\r\n        listActivityViewModel.getErrorLiveData().observe(this, this::showError)\r\n    }\r\n\r\n    private fun makeRequest() {\r\n        handleSavedCity()\r\n        listActivityViewModel.publishWeatherLiveData(savedCity!!.lat, savedCity!!.lon)\r\n\r\n        binding?.buttonSettings?.setOnClickListener { startSettings() }\r\n    }\r\n\r\n    private fun showError(error: Throwable) {\r\n        Snackbar.make(binding?.root!!, error.toString(), BaseTransientBottomBar.LENGTH_LONG).show()\r\n    }\r\n\r\n    private fun showProgress(isVisible: Boolean) {\r\n        if (isVisible) binding?.progressBar?.visibility = View.VISIBLE\r\n        else binding?.progressBar?.visibility = View.GONE\r\n    }\r\n\r\n    private fun showData(weatherList: List<WeeklyWeather>) {\r\n        setUpTableauData(weatherList[0])\r\n        handleDayNightTableau(weatherList[0])\r\n        initIcons(weatherList[0])\r\n\r\n        binding?.swipeRefresh?.isRefreshing = false\r\n        binding?.viewToday?.setOnClickListener { startDetail(weatherList[0]) }\r\n\r\n        binding?.recView!!.adapter = WeatherListAdapter(weatherList.subList(1, weatherList.size - 1), object: IClickListener {\r\n            override fun openItem(position: Int, weather: WeeklyWeather) { startDetail(weather) }\r\n        })\r\n\r\n        binding?.recView!!.adapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun initRecycler() {\r\n        val itemDecoration = DividerItemDecoration(binding!!.recView.context, DividerItemDecoration.VERTICAL)\r\n        itemDecoration.setDrawable(getDrawable(R.drawable.recycler_vertical_divider)!!)\r\n        binding!!.recView.addItemDecoration(itemDecoration)\r\n    }\r\n\r\n    private fun initSwipeRefresh() {\r\n        binding?.swipeRefresh?.setOnRefreshListener {\r\n            onRefresh()\r\n        }\r\n    }\r\n\r\n    private fun onRefresh() {\r\n        listActivityViewModel.publishWeatherLiveData(savedCity!!.lat, savedCity!!.lon)\r\n        Toast.makeText(this@ListActivity, \"Данные обновлены\", Toast.LENGTH_LONG).show()\r\n    }\r\n\r\n    private fun handleSavedCity() {\r\n        savedCity = listActivityViewModel.applicationResLocator.readFromPrefs()\r\n\r\n        if (savedCity!!.lat == 0.0) {\r\n            val dialog = utils?.provideAlertDialog(this, Constants.NO_CITY_SELECTED)\r\n            setupDialog(this, utils!!, dialog!!)\r\n            startSettings()\r\n        }\r\n    }\r\n\r\n    private fun startDetail(weather: WeeklyWeather) {\r\n        var intent = Intent(applicationContext, DetailActivity::class.java)\r\n        intent.putExtra(BUNDLE_SELECTED_DAY_KEY, weather)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun startSettings() {\r\n        var intent = Intent(applicationContext, SettingsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun setUpTableauData(todayData: WeeklyWeather) {\r\n        binding?.textViewCity?.text = savedCity?.cityName\r\n        binding?.textViewTodayDayT?.text = todayData.dayTemp\r\n        binding?.textViewTodayNightT?.text = todayData.nightTemp\r\n        binding?.textViewTodayWindS?.text = todayData.windSpeed\r\n        binding?.textViewTodayDesc?.text = todayData.description\r\n    }\r\n\r\n    private fun handleDayNightTableau(todayData: WeeklyWeather) {\r\n        val additionalDateFormat = SimpleDateFormat(\"HH:mm\", Locale(\"ru\"))\r\n        var now = additionalDateFormat.parse(additionalDateFormat.format(Date()))\r\n\r\n        if (now > todayData.sunriseRaw && now < todayData.sunsetRaw)\r\n            colorizeViewBackground(false)\r\n        else\r\n            colorizeViewBackground(true)\r\n    }\r\n\r\n    private fun colorizeViewBackground(isNight: Boolean) {\r\n        binding?.viewToday?.background?.colorFilter = when (isNight) {\r\n            true -> BlendModeColorFilterCompat.createBlendModeColorFilterCompat(resources.getColor(R.color.main_rect_night), BlendModeCompat.SRC_ATOP)\r\n            false -> BlendModeColorFilterCompat.createBlendModeColorFilterCompat(resources.getColor(R.color.main_rect_day), BlendModeCompat.SRC_ATOP)\r\n        }\r\n    }\r\n\r\n    private fun initIcons(todayData: WeeklyWeather) {\r\n        Picasso.get()\r\n            .load(Constants.BASE_ICON + todayData.icon + Constants.ICON_END)\r\n            .fit()\r\n            .into(binding?.imageViewToday)\r\n    }\r\n\r\n    private fun setupDialog(context: Context, utils: Utility, dialog: AlertDialog) {\r\n        dialog.setOnShowListener {\r\n            var button = dialog.getButton(AlertDialog.BUTTON_POSITIVE)\r\n            dialog.setCancelable(false)\r\n            dialog.setCanceledOnTouchOutside(false)\r\n\r\n            button.setOnClickListener {\r\n                if (utils.isNetworkAvailable(context)) {\r\n                    createViewModel()\r\n                    subscribeForLiveData()\r\n                    makeRequest()\r\n                    dialog.dismiss()\r\n                }\r\n            }\r\n        }\r\n        dialog.show()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt	(revision 98fea98ff557bfc989f7bb23399da27fae1fc56b)
+++ app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt	(date 1638220596691)
@@ -5,7 +5,6 @@
 import android.content.Intent
 import android.os.Build
 import android.os.Bundle
-import android.util.Log
 import android.view.View
 import android.widget.Toast
 import androidx.annotation.RequiresApi
