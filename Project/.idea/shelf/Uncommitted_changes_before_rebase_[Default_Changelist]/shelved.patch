Index: app/src/main/java/com/example/meteohub/di/MyApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.di\r\n\r\nimport android.app.Application\r\nimport androidx.room.Room\r\nimport com.example.meteohub.data.db.AppDatabase\r\n\r\n/**\r\n * @author Bulat Bagaviev\r\n * @created 19.11.2021\r\n */\r\n\r\nopen class MyApplication: Application() {\r\n    private var instance: AppDatabase? = null\r\n\r\n    val appComponent: ApplicationComponent by lazy {\r\n        DaggerApplicationComponent.create()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        if (instance == null) {\r\n            instance = Room.databaseBuilder(applicationContext, AppDatabase::class.java, \"city.db\")\r\n                .createFromAsset(\"app.db\")\r\n                .build()\r\n        }\r\n        super.onCreate()\r\n    }\r\n\r\n    fun getRoomInstance(): AppDatabase {\r\n        return instance!!\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/di/MyApplication.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/di/MyApplication.kt	(date 1637581671930)
@@ -1,8 +1,12 @@
 package com.example.meteohub.di
 
 import android.app.Application
+import android.content.Context
 import androidx.room.Room
 import com.example.meteohub.data.db.AppDatabase
+import com.example.meteohub.data.db.CityDao
+import dagger.Module
+import dagger.Provides
 
 /**
  * @author Bulat Bagaviev
@@ -10,22 +14,7 @@
  */
 
 open class MyApplication: Application() {
-    private var instance: AppDatabase? = null
-
     val appComponent: ApplicationComponent by lazy {
-        DaggerApplicationComponent.create()
-    }
-
-    override fun onCreate() {
-        if (instance == null) {
-            instance = Room.databaseBuilder(applicationContext, AppDatabase::class.java, "city.db")
-                .createFromAsset("app.db")
-                .build()
-        }
-        super.onCreate()
-    }
-
-    fun getRoomInstance(): AppDatabase {
-        return instance!!
+        DaggerApplicationComponent.factory().create(applicationContext)
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/meteohub/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.di\r\n\r\nimport com.example.meteohub.domain.IRepository\r\nimport com.example.meteohub.data.Repository\r\nimport dagger.Binds\r\nimport dagger.Module\r\n\r\n/**\r\n * @author Bulat Bagaviev\r\n * @created 19.11.2021\r\n */\r\n\r\n@Module\r\ninterface AppModule {\r\n    @Binds\r\n    fun convertInterfaceToImpl(instance: Repository): IRepository\r\n}\r\n
===================================================================
--- app/src/main/java/com/example/meteohub/di/AppModule.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/di/RepoModule.kt	(date 1637579561588)
@@ -11,7 +11,7 @@
  */
 
 @Module
-interface AppModule {
+interface RepoModule {
     @Binds
     fun convertInterfaceToImpl(instance: Repository): IRepository
 }
Index: app/src/main/java/com/example/meteohub/data/Repository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.data\r\n\r\nimport com.example.meteohub.data.network.IOpenWeatherApi\r\nimport com.example.meteohub.domain.IRepository\r\nimport com.example.meteohub.domain.api_model.RequestMain\r\nimport io.reactivex.Single\r\nimport javax.inject.Inject\r\n\r\n/**\r\n * @author Bulat Bagaviev\r\n * @created 10.11.2021\r\n */\r\n\r\nclass Repository\r\n@Inject constructor (var networkConnector: IOpenWeatherApi): IRepository {\r\n\r\n    override fun loadWeatherAsync(lat: Double, lon: Double, app_id: String?): Single<RequestMain?>? {\r\n        return networkConnector.getWeather(lat, lon, app_id)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/data/Repository.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/data/Repository.kt	(date 1637578935562)
@@ -1,8 +1,10 @@
 package com.example.meteohub.data
 
+import com.example.meteohub.data.db.CityDao
 import com.example.meteohub.data.network.IOpenWeatherApi
 import com.example.meteohub.domain.IRepository
 import com.example.meteohub.domain.api_model.RequestMain
+import com.example.meteohub.domain.our_model.City
 import io.reactivex.Single
 import javax.inject.Inject
 
@@ -12,9 +14,13 @@
  */
 
 class Repository
-@Inject constructor (var networkConnector: IOpenWeatherApi): IRepository {
+@Inject constructor (var networkConnector: IOpenWeatherApi, var dbConnector: CityDao): IRepository {
 
     override fun loadWeatherAsync(lat: Double, lon: Double, app_id: String?): Single<RequestMain?>? {
         return networkConnector.getWeather(lat, lon, app_id)
     }
+
+    override fun loadCitiesAsync(lat: Double, lon: Double): Single<List<City>> {
+        return Single.fromCallable { dbConnector.getSampled(lat, lon) }
+    }
 }
Index: app/src/main/java/com/example/meteohub/di/ApplicationComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.di\r\n\r\nimport com.example.meteohub.domain.IRepository\r\nimport com.example.meteohub.data.network.NetworkModule\r\nimport dagger.Component\r\n\r\n/**\r\n * @author Bulat Bagaviev\r\n * @created 19.11.2021\r\n */\r\n\r\n@Component(modules = [NetworkModule::class, AppModule::class])\r\ninterface ApplicationComponent {\r\n    fun getRepository(): IRepository\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/di/ApplicationComponent.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/di/ApplicationComponent.kt	(date 1637581534844)
@@ -1,7 +1,9 @@
 package com.example.meteohub.di
 
+import android.content.Context
 import com.example.meteohub.domain.IRepository
 import com.example.meteohub.data.network.NetworkModule
+import dagger.BindsInstance
 import dagger.Component
 
 /**
@@ -9,7 +11,12 @@
  * @created 19.11.2021
  */
 
-@Component(modules = [NetworkModule::class, AppModule::class])
+@Component(modules = [NetworkModule::class, RepoModule::class, DbModule::class])
 interface ApplicationComponent {
     fun getRepository(): IRepository
+
+    @Component.Factory
+    interface Factory {
+        fun create(@BindsInstance context: Context): ApplicationComponent
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/meteohub/di/DbModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/di/DbModule.kt	(date 1637579561570)
+++ app/src/main/java/com/example/meteohub/di/DbModule.kt	(date 1637579561570)
@@ -0,0 +1,19 @@
+package com.example.meteohub.di
+
+import com.example.meteohub.data.Repository
+import com.example.meteohub.data.db.CityDao
+import com.example.meteohub.data.db.CityDao_Impl
+import com.example.meteohub.domain.IRepository
+import dagger.Binds
+import dagger.Module
+
+/**
+ * @author Bulat Bagaviev
+ * @created 22.11.2021
+ */
+
+@Module
+interface DbModule {
+    @Binds
+    fun convertInterfaceToImpl(instance: CityDao_Impl): CityDao
+}
\ No newline at end of file
Index: app/src/main/java/com/example/meteohub/data/db/DbModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/data/db/DbModule.kt	(date 1637581597248)
+++ app/src/main/java/com/example/meteohub/data/db/DbModule.kt	(date 1637581597248)
@@ -0,0 +1,32 @@
+package com.example.meteohub.data.db
+
+import android.content.Context
+import androidx.room.Room
+import com.example.meteohub.di.ApplicationComponent
+import com.example.meteohub.di.MyApplication
+import dagger.Module
+import dagger.Provides
+import javax.inject.Inject
+
+/**
+ * @author Bulat Bagaviev
+ * @created 22.11.2021
+ */
+
+@Module
+class DbModule @Inject constructor(context: Context) {
+    private var instance: AppDatabase? = null
+
+    init {
+        if (instance == null) {
+            instance = Room.databaseBuilder(context, AppDatabase::class.java, "city.db")
+                .createFromAsset("app.db")
+                .build()
+        }
+    }
+
+    @Provides
+    fun getRoomInstance(): CityDao {
+        return instance?.cityDao()!!
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/meteohub/domain/IRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.domain\r\n\r\nimport com.example.meteohub.domain.api_model.RequestMain\r\nimport io.reactivex.Single\r\n\r\n/**\r\n * @author Bulat Bagaviev\r\n * @created 11.11.2021\r\n */\r\n\r\ninterface IRepository {\r\n    fun loadWeatherAsync(lat: Double, lon: Double, app_id: String?): Single<RequestMain?>?\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/domain/IRepository.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/domain/IRepository.kt	(date 1637578935543)
@@ -1,6 +1,7 @@
 package com.example.meteohub.domain
 
 import com.example.meteohub.domain.api_model.RequestMain
+import com.example.meteohub.domain.our_model.City
 import io.reactivex.Single
 
 /**
@@ -10,4 +11,6 @@
 
 interface IRepository {
     fun loadWeatherAsync(lat: Double, lon: Double, app_id: String?): Single<RequestMain?>?
+
+    fun loadCitiesAsync(lat: Double, lon: Double): Single<List<City>>
 }
\ No newline at end of file
Index: app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meteohub.presentation.view\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.DividerItemDecoration\r\nimport com.example.meteohub.R\r\nimport com.example.meteohub.data.db.AppDatabase\r\nimport com.example.meteohub.data.network.NetworkModule\r\nimport com.example.meteohub.databinding.ActivityListBinding\r\nimport com.example.meteohub.di.MyApplication\r\nimport com.example.meteohub.domain.IRepository\r\nimport com.example.meteohub.domain.our_model.City\r\nimport com.example.meteohub.domain.our_model.WeeklyWeather\r\nimport com.example.meteohub.presentation.view.adapter.IClickListener\r\nimport com.example.meteohub.presentation.view.adapter.WeatherListAdapter\r\nimport com.example.meteohub.presentation.viewmodel.ListActivityViewModel\r\nimport com.google.android.material.snackbar.BaseTransientBottomBar\r\nimport com.google.android.material.snackbar.Snackbar\r\n\r\nclass ListActivity : AppCompatActivity() {\r\n    private var binding: ActivityListBinding? = null\r\n\r\n    private lateinit var db: AppDatabase\r\n\r\n    private lateinit var listActivityViewModel: ListActivityViewModel\r\n\r\n    private var cityList = arrayListOf<City>()\r\n\r\n    companion object {\r\n        var BUNDLE_SELECTED_DAY_KEY: String? = \"BUNDLE_SELECTED_DAY_KEY\"\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityListBinding.inflate(layoutInflater)\r\n\r\n        val view = binding!!.root\r\n        setContentView(view)\r\n\r\n        createViewModel()\r\n        subscribeForLiveData()\r\n\r\n        if (savedInstanceState == null) {\r\n            listActivityViewModel.publishToLiveData()\r\n        }\r\n\r\n        val itemDecoration = DividerItemDecoration(binding!!.recView.context, DividerItemDecoration.VERTICAL)\r\n        itemDecoration.setDrawable(getDrawable(R.drawable.own_vertical_divider)!!)\r\n        binding!!.recView.addItemDecoration(itemDecoration)\r\n    }\r\n\r\n    override fun onStart() {\r\n        db = (applicationContext as MyApplication).getRoomInstance()\r\n\r\n        Log.e(\"db instance: \", \"onStart: ${db.hashCode()}\")\r\n\r\n        binding?.buttonLoad?.setOnClickListener {\r\n            loadFromDb()\r\n        }\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        db.close()\r\n        super.onDestroy()\r\n    }\r\n\r\n    private fun loadFromDb() {\r\n        Thread {    // data load from app.db file happens only once per first app install, other time reference lives in app class\r\n            val result = db.cityDao().getSampled(NetworkModule.lat, NetworkModule.lon)\r\n\r\n            runOnUiThread {\r\n                binding?.textViewDb?.text = result.toString()\r\n            }\r\n        }.start()\r\n    }\r\n\r\n    private fun createViewModel() {\r\n        val repository: IRepository = (applicationContext as MyApplication).appComponent.getRepository()\r\n\r\n        listActivityViewModel = ViewModelProvider(this, object: ViewModelProvider.Factory {\r\n            override fun <T : ViewModel?> create(modelClass: Class<T>): T {\r\n                return ListActivityViewModel(repository) as T\r\n            }\r\n        }).get(ListActivityViewModel::class.java)\r\n    }\r\n\r\n    private fun subscribeForLiveData() {     // потом прикрутить swipe refresh layout и в нем вызывать только listActivityViewModel.doGet() в коллбеке layout'а, и при этом observeLiveData() больше нигде не вызывать. В таком случае обновление загруженных данных должно произойти само если я все правильно понимаю\r\n        listActivityViewModel.getWeatherLiveData().observe(this, this::showData)\r\n        listActivityViewModel.getProgressLiveData().observe(this, this::showProgress);\r\n        listActivityViewModel.getErrorLiveData().observe(this, this::showError);\r\n    }\r\n\r\n    private fun showError(error: Throwable) {\r\n//        Log.e(\"TAG\", \"Some exceptions from Rx: $error\");\r\n        Snackbar.make(binding?.root!!, error.toString(), BaseTransientBottomBar.LENGTH_LONG).show();    // магия\r\n    }\r\n\r\n    private fun showProgress(isVisible: Boolean) {\r\n        if (isVisible) binding?.progressBar?.visibility = View.VISIBLE      // магия\r\n        else binding?.progressBar?.visibility = View.GONE\r\n    }\r\n\r\n    private fun showData(weatherList: List<WeeklyWeather>) {\r\n        binding?.recView!!.adapter = WeatherListAdapter(weatherList, object: IClickListener {   // тут могло бы быть красивее, но увы как есть пока\r\n            override fun openItem(position: Int, weather: WeeklyWeather) {\r\n                startDetail(weather)\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun startDetail(weather: WeeklyWeather) {\r\n        var intent = Intent(applicationContext, DetailActivity::class.java)\r\n        intent.putExtra(BUNDLE_SELECTED_DAY_KEY, weather)\r\n        startActivity(intent)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt	(revision ab55c610bd8f56a3fa7e03c6f8614c70d522863a)
+++ app/src/main/java/com/example/meteohub/presentation/view/ListActivity.kt	(date 1637579709522)
@@ -27,7 +27,7 @@
 class ListActivity : AppCompatActivity() {
     private var binding: ActivityListBinding? = null
 
-    private lateinit var db: AppDatabase
+    private lateinit var db: CityDao
 
     private lateinit var listActivityViewModel: ListActivityViewModel
 
